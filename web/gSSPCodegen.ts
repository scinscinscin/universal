import fs from "fs/promises";
import path from "path";
import { type getServerSideProps } from "./src/pages/index.page";

async function recurisvelyFindFiles(directory: string, context = [] as string[]): Promise<string[]> {
  const contents = await fs.readdir(directory, { withFileTypes: true });
  for (const dirEnt of contents) {
    const absolutePath = path.join(directory, dirEnt.name);

    if (dirEnt.isDirectory()) await recurisvelyFindFiles(absolutePath, context);
    else if (absolutePath.endsWith(".page.tsx")) context.push(absolutePath);
  }

  return context;
}

const imports = [] as string[],
  types = [] as string[];

const unWindowsify = (path: string) => path.split("\\").join("/");

const charset = `qwertyuiopasdfghjklzxcvbnm`;
const getRandomString = (l: number = 12): string =>
  l > 0 ? getRandomString(l - 1) + charset[Math.floor(Math.random() * charset.length)] : "";

const capitalize = (string: string) => string.charAt(0).toUpperCase() + string.slice(1);
const camelize = (path: string) => {
  const parts = path
    .split("/")
    .filter((e) => e.length > 0)
    .map((segment) => segment.split("."));
  return parts.map((segments) => segments.map((e) => capitalize(e)).join("")).join("");
};

async function main() {
  const files = await recurisvelyFindFiles(process.cwd());

  for (const filePath of files) {
    const contents = await fs.readFile(filePath, { encoding: "utf-8" });
    if (!contents.includes("export const getServerSideProps")) continue;

    const relativePath = unWindowsify(filePath.replace(process.cwd(), "").replace(".tsx", ""));
    const alias = camelize(relativePath);
    imports.push(`import { getServerSideProps as ${alias} } from ".${relativePath}"`);

    types.push(
      `  "${relativePath.replace("/src/pages", "").replace(".page", "")}": UnNextify<ReturnType<typeof ${alias}>>;`
    );
  }

  const contents = `// THIS CODE IS AUTOGENERATED, DO NOT MODIFY IT DIRECTLY
import { GetServerSidePropsResult } from "next";
${imports.join("\n")}

type UnNextify<T> = T extends Promise<GetServerSidePropsResult<infer R>> ? R : never;

export type Pages = {
${types.join("\n")}
}
`;
  await fs.writeFile(path.join(process.cwd(), "./routes.ts"), contents);
}

main();
